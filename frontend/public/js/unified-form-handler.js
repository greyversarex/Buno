/**
 * UNIFIED FORM HANDLER
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 * –£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –º–µ–∂–¥—É Tours, Hotels, Guides, Drivers –∏ —Ç.–¥.
 */

class UnifiedFormHandler {
  /**
   * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
   * @param {string} config.entity - –ù–∞–∑–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ ('tour', 'hotel', 'guide', 'driver')
   * @param {string} config.formId - ID —Ñ–æ—Ä–º—ã
   * @param {string} config.idFieldId - ID –ø–æ–ª—è —Å ID —Å—É—â–Ω–æ—Å—Ç–∏
   * @param {string} config.apiEndpoint - API endpoint (–Ω–∞–ø—Ä–∏–º–µ—Ä '/api/tours')
   * @param {boolean} config.useFormData - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FormData (–¥–ª—è —Ñ–∞–π–ª–æ–≤) –∏–ª–∏ JSON
   * @param {Function} config.onSuccess - Callback –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
   * @param {Function} config.onError - Callback –ø—Ä–∏ –æ—à–∏–±–∫–µ
   * @param {Function} config.collectData - –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
   * @param {Function} config.validateData - –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  constructor(config) {
    this.config = config;
    this.formElement = document.getElementById(config.formId);
    
    if (!this.formElement) {
      console.error(`Form with id "${config.formId}" not found`);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
   */
  async save() {
    try {
      // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º (create –∏–ª–∏ edit)
      const entityId = document.getElementById(this.config.idFieldId)?.value;
      const isEditing = entityId && entityId !== '';
      
      console.log(`üíæ Saving ${this.config.entity}:`, isEditing ? `Editing ID ${entityId}` : 'Creating new');

      // 2. –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
      const data = this.config.collectData ? 
        this.config.collectData(isEditing, entityId) : 
        this.collectFormData();

      // 3. –í–∞–ª–∏–¥–∞—Ü–∏—è (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞)
      if (this.config.validateData) {
        const validation = this.config.validateData(data);
        if (!validation.valid) {
          alert(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validation.message}`);
          return;
        }
      }

      // 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      const method = isEditing ? 'PUT' : 'POST';
      const url = isEditing ? 
        `${this.config.apiEndpoint}/${entityId}` : 
        this.config.apiEndpoint;

      // 5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ headers
      const headers = {};
      const token = localStorage.getItem('adminToken') || localStorage.getItem('authToken');
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }

      // –î–ª—è JSON —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type
      if (!this.config.useFormData) {
        headers['Content-Type'] = 'application/json';
      }

      // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      console.log(`üì§ Sending ${method} request to ${url}`);
      
      const response = await fetch(url, {
        method: method,
        headers: headers,
        body: this.config.useFormData ? data : JSON.stringify(data)
      });

      const result = await response.json();

      // 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      if (response.ok && result.success !== false) {
        console.log(`‚úÖ ${this.config.entity} saved successfully:`, result);
        
        // Callback —É—Å–ø–µ—Ö–∞
        if (this.config.onSuccess) {
          this.config.onSuccess(result, isEditing);
        } else {
          alert(`${this.config.entity} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!`);
        }
      } else {
        throw new Error(result.message || result.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }

    } catch (error) {
      console.error(`‚ùå Error saving ${this.config.entity}:`, error);
      
      // Callback –æ—à–∏–±–∫–∏
      if (this.config.onError) {
        this.config.onError(error);
      } else {
        alert(`–û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
  }

  /**
   * –ë–∞–∑–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
   */
  collectFormData() {
    if (this.config.useFormData) {
      return new FormData(this.formElement);
    } else {
      // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö input/select/textarea
      const formData = {};
      const inputs = this.formElement.querySelectorAll('input, select, textarea');
      
      inputs.forEach(input => {
        if (input.name) {
          formData[input.name] = input.value;
        }
      });
      
      return formData;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async load(entityId) {
    try {
      console.log(`üì• Loading ${this.config.entity} with ID ${entityId}`);

      const headers = {};
      const token = localStorage.getItem('adminToken') || localStorage.getItem('authToken');
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }

      const response = await fetch(
        `${this.config.apiEndpoint}/${entityId}?includeRaw=true`,
        { headers }
      );

      const result = await response.json();

      if (response.ok && result.success !== false) {
        console.log(`‚úÖ ${this.config.entity} loaded:`, result);
        return result.data;
      } else {
        throw new Error(result.message || result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
      }

    } catch (error) {
      console.error(`‚ùå Error loading ${this.config.entity}:`, error);
      alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
      return null;
    }
  }
}

/**
 * –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
 */

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–≥–æ –ø–æ–ª—è –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –∏–Ω–ø—É—Ç–æ–≤
 * @param {string} enValue - –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
 * @param {string} ruValue - –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
 */
function createMultilingualField(enValue, ruValue) {
  return {
    en: enValue || '',
    ru: ruValue || ''
  };
}

/**
 * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–µ
 * @param {string} fieldNamePrefix - –ü—Ä–µ—Ñ–∏–∫—Å –∏–º–µ–Ω–∏ –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 'tourTitle')
 * @param {Object|string} fieldValue - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è (JSON –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
 */
function fillMultilingualField(fieldNamePrefix, fieldValue) {
  let parsed = fieldValue;
  
  // –ü–∞—Ä—Å–∏–º –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
  if (typeof fieldValue === 'string') {
    try {
      parsed = JSON.parse(fieldValue);
    } catch {
      parsed = { ru: fieldValue, en: '' };
    }
  }
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
  const enField = document.getElementById(`${fieldNamePrefix}EN`);
  const ruField = document.getElementById(`${fieldNamePrefix}RU`);
  
  if (enField) enField.value = parsed?.en || '';
  if (ruField) ruField.value = parsed?.ru || '';
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–≥–æ –ø–æ–ª—è
 * @param {Object} field - –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–µ –ø–æ–ª–µ
 * @param {string} fieldName - –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
 */
function validateMultilingualField(field, fieldName) {
  if (!field || (!field.en && !field.ru)) {
    return {
      valid: false,
      message: `${fieldName} –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ`
    };
  }
  return { valid: true };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function getAuthToken() {
  return localStorage.getItem('adminToken') || 
         localStorage.getItem('authToken') || 
         localStorage.getItem('guideToken') || 
         localStorage.getItem('driverToken');
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
 */
function getAuthHeaders(includeContentType = true) {
  const headers = {};
  const token = getAuthToken();
  
  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }
  
  if (includeContentType) {
    headers['Content-Type'] = 'application/json';
  }
  
  return headers;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ admin-dashboard.html)
window.UnifiedFormHandler = UnifiedFormHandler;
window.createMultilingualField = createMultilingualField;
window.fillMultilingualField = fillMultilingualField;
window.validateMultilingualField = validateMultilingualField;
window.getAuthToken = getAuthToken;
window.getAuthHeaders = getAuthHeaders;
