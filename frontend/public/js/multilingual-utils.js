/**
 * üåê –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ –ú–ù–û–ì–û–Ø–ó–´–ß–ù–û–°–¢–ò –î–õ–Ø –§–†–û–ù–¢–ï–ù–î–ê
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */

// === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –ú–ù–û–ì–û–Ø–ó–´–ß–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê ===

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç JSON —Å—Ç—Ä–æ–∫—É —Å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
 * @param {any} jsonString - JSON —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç
 * @param {object} defaultValue - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * @returns {object|string} –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞
 */
function safeJsonParse(jsonString, defaultValue = { ru: '', en: '' }) {
  if (!jsonString) return defaultValue;
  if (typeof jsonString === 'object') return jsonString;
  
  try {
    return JSON.parse(jsonString);
  } catch (error) {
    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë –∫–∞–∫ –µ—Å—Ç—å
    if (typeof jsonString === 'string') {
      return jsonString;
    }
    console.warn('JSON parsing error:', error);
    return defaultValue;
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ —Å fallback
 * @param {object|string} field - –ü–æ–ª–µ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞
 * @param {string} language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ ('en' | 'ru')
 * @returns {string} –¢–µ–∫—Å—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
 */
function getLocalizedText(field, language = 'ru') {
  if (!field) return '';
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (typeof field === 'string') {
    return field;
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
  if (typeof field === 'object' && field !== null) {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    const text = field[language];
    if (text && text.trim()) {
      return text;
    }
    
    // Fallback: –µ—Å–ª–∏ EN –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º RU
    if (language === 'en' && field.ru && field.ru.trim()) {
      return field.ru;
    }
    
    // Fallback: –µ—Å–ª–∏ RU –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º EN
    if (language === 'ru' && field.en && field.en.trim()) {
      return field.en;
    }
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—é–±–æ–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    return field.ru || field.en || '';
  }
  
  return '';
}

/**
 * –ü–∞—Ä—Å–∏—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–µ –ø–æ–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
 * @param {any} jsonField - JSON –ø–æ–ª–µ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
 * @param {string} language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
 * @returns {string} –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function parseMultilingualField(jsonField, language = 'ru') {
  const parsed = safeJsonParse(jsonField, { ru: '', en: '' });
  return getLocalizedText(parsed, language);
}

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° DOM –≠–õ–ï–ú–ï–ù–¢–ê–ú–ò ===

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
 * @param {HTMLElement} element - DOM —ç–ª–µ–º–µ–Ω—Ç
 * @param {any} content - –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (JSON –∏–ª–∏ –æ–±—ä–µ–∫—Ç)
 * @param {string} language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
 * @param {string} property - –°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ('textContent', 'innerHTML', 'title', etc.)
 */
function updateMultilingualElement(element, content, language, property = 'textContent') {
  if (!element || !content) return;
  
  const localizedText = parseMultilingualField(content, language);
  
  if (property === 'textContent') {
    element.textContent = localizedText;
  } else if (property === 'innerHTML') {
    element.innerHTML = localizedText;
  } else if (property === 'title') {
    element.title = localizedText;
  } else if (property === 'placeholder') {
    element.placeholder = localizedText;
  } else {
    element.setAttribute(property, localizedText);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-–∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –¥–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * @param {string} language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
 */
function updateDataAttributeElements(language) {
  // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-multilingual-text
  document.querySelectorAll('[data-multilingual-text]').forEach(element => {
    const content = element.dataset.multilingualText;
    updateMultilingualElement(element, content, language, 'textContent');
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-multilingual-html  
  document.querySelectorAll('[data-multilingual-html]').forEach(element => {
    const content = element.dataset.multilingualHtml;
    updateMultilingualElement(element, content, language, 'innerHTML');
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-multilingual-title
  document.querySelectorAll('[data-multilingual-title]').forEach(element => {
    const content = element.dataset.multilingualTitle;
    updateMultilingualElement(element, content, language, 'title');
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-multilingual-placeholder
  document.querySelectorAll('[data-multilingual-placeholder]').forEach(element => {
    const content = element.dataset.multilingualPlaceholder;
    updateMultilingualElement(element, content, language, 'placeholder');
  });
}

// === –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–£–†–û–í, –û–¢–ï–õ–ï–ô, –ì–ò–î–û–í ===

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç—É—Ä–æ–≤
 * @param {string} language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
 */
function updateTourTitles(language) {
  document.querySelectorAll('[data-tour-title]').forEach(element => {
    const titleData = element.dataset.tourTitle;
    updateMultilingualElement(element, titleData, language, 'textContent');
  });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–æ–≤
 * @param {string} language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
 */
function updateTourDescriptions(language) {
  document.querySelectorAll('[data-tour-description]').forEach(element => {
    const descData = element.dataset.tourDescription;
    updateMultilingualElement(element, descData, language, 'textContent');
  });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 * @param {string} language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
 */
function updateCategoryNames(language) {
  document.querySelectorAll('[data-category-name]').forEach(element => {
    const categoryData = element.dataset.categoryName;
    updateMultilingualElement(element, categoryData, language, 'textContent');
  });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π
 * @param {string} language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
 */
function updateHotelContent(language) {
  // –ù–∞–∑–≤–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π
  document.querySelectorAll('[data-hotel-name]').forEach(element => {
    const nameData = element.dataset.hotelName;
    updateMultilingualElement(element, nameData, language, 'textContent');
  });
  
  // –û–ø–∏—Å–∞–Ω–∏—è –æ—Ç–µ–ª–µ–π
  document.querySelectorAll('[data-hotel-description]').forEach(element => {
    const descData = element.dataset.hotelDescription;
    updateMultilingualElement(element, descData, language, 'textContent');
  });
  
  // –ê–¥—Ä–µ—Å–∞ –æ—Ç–µ–ª–µ–π
  document.querySelectorAll('[data-hotel-address]').forEach(element => {
    const addressData = element.dataset.hotelAddress;
    updateMultilingualElement(element, addressData, language, 'textContent');
  });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∏–¥–∞—Ö
 * @param {string} language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
 */
function updateGuideContent(language) {
  // –ò–º–µ–Ω–∞ –≥–∏–¥–æ–≤
  document.querySelectorAll('[data-guide-name]').forEach(element => {
    const nameData = element.dataset.guideName;
    updateMultilingualElement(element, nameData, language, 'textContent');
  });
  
  // –û–ø–∏—Å–∞–Ω–∏—è –≥–∏–¥–æ–≤
  document.querySelectorAll('[data-guide-description]').forEach(element => {
    const descData = element.dataset.guideDescription;
    updateMultilingualElement(element, descData, language, 'textContent');
  });
  
  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–∏–¥–æ–≤
  document.querySelectorAll('[data-guide-specialization]').forEach(element => {
    const specData = element.dataset.guideSpecialization;
    updateMultilingualElement(element, specData, language, 'textContent');
  });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤
 * @param {string} language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
 */
function updateLocationNames(language) {
  // –°—Ç—Ä–∞–Ω—ã
  document.querySelectorAll('[data-country-name]').forEach(element => {
    const countryData = element.dataset.countryName;
    updateMultilingualElement(element, countryData, language, 'textContent');
  });
  
  // –ì–æ—Ä–æ–¥–∞
  document.querySelectorAll('[data-city-name]').forEach(element => {
    const cityData = element.dataset.cityName;
    updateMultilingualElement(element, cityData, language, 'textContent');
  });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–ª–æ–∫–æ–≤ —Ç—É—Ä–æ–≤
 * @param {string} language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
 */
function updateTourBlockTitles(language) {
  document.querySelectorAll('[data-tour-block-title]').forEach(element => {
    const titleData = element.dataset.tourBlockTitle;
    updateMultilingualElement(element, titleData, language, 'textContent');
  });
}

// === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–í–û–î–ê –í–°–ï–ì–û –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê ===

/**
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–µ—Å—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫
 * @param {string} language - –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ ('en' | 'ru')
 */
function translateAllDynamicContent(language) {
  console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞: ${language}`);
  
  let updatedCount = 0;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  updateDataAttributeElements(language);
  updatedCount += document.querySelectorAll('[data-multilingual-text], [data-multilingual-html], [data-multilingual-title], [data-multilingual-placeholder]').length;
  
  updateTourTitles(language);
  updatedCount += document.querySelectorAll('[data-tour-title]').length;
  
  updateTourDescriptions(language);
  updatedCount += document.querySelectorAll('[data-tour-description]').length;
  
  updateCategoryNames(language);
  updatedCount += document.querySelectorAll('[data-category-name]').length;
  
  updateHotelContent(language);
  updatedCount += document.querySelectorAll('[data-hotel-name], [data-hotel-description], [data-hotel-address]').length;
  
  updateGuideContent(language);
  updatedCount += document.querySelectorAll('[data-guide-name], [data-guide-description], [data-guide-specialization]').length;
  
  updateLocationNames(language);
  updatedCount += document.querySelectorAll('[data-country-name], [data-city-name]').length;
  
  updateTourBlockTitles(language);
  updatedCount += document.querySelectorAll('[data-tour-block-title]').length;
  
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞`);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–∫—Ä–∏–ø—Ç—ã –æ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
  const event = new CustomEvent('dynamicContentTranslated', {
    detail: { language, updatedCount }
  });
  document.dispatchEvent(event);
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

/**
 * –°–æ–∑–¥–∞–µ—Ç data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
 * @param {any} content - –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
 * @param {string} type - –¢–∏–ø –∞—Ç—Ä–∏–±—É—Ç–∞ ('text', 'html', 'title', 'placeholder')
 * @returns {string} –°—Ç—Ä–æ–∫–∞ —Å data-–∞—Ç—Ä–∏–±—É—Ç–æ–º
 */
function createMultilingualDataAttribute(content, type = 'text') {
  if (!content) return '';
  
  const jsonString = typeof content === 'object' ? JSON.stringify(content) : content;
  const escapedContent = jsonString.replace(/"/g, '&quot;');
  
  return `data-multilingual-${type}="${escapedContent}"`;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * @returns {string} –ö–æ–¥ —è–∑—ã–∫–∞ ('en' | 'ru')
 */
function getCurrentLanguage() {
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: window.currentLanguage > localStorage > navigator > default 'ru'
  return window.currentLanguage || 
         localStorage.getItem('selectedLanguage') || 
         (navigator.language.startsWith('en') ? 'en' : 'ru') || 
         'ru';
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —è–∑—ã–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
 * @param {string} language - –ù–æ–≤—ã–π —è–∑—ã–∫
 */
function switchToLanguage(language) {
  if (!['en', 'ru'].includes(language)) {
    console.warn(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫: ${language}`);
    return;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  window.currentLanguage = language;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
  localStorage.setItem('selectedLanguage', language);
  
  // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤–µ—Å—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
  translateAllDynamicContent(language);
  
  // –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
  if (typeof window.switchSiteLanguage === 'function') {
    window.switchSiteLanguage(language);
  }
  
  console.log(`üåç –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: ${language}`);
}

// === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
 * @param {any} titleObject - –û–±—ä–µ–∫—Ç –∏–ª–∏ JSON —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
 * @param {string} lang - –ö–æ–¥ —è–∑—ã–∫–∞
 * @returns {string} –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
 */
function getTitleByLanguage(titleObject, lang) {
    return parseMultilingualField(titleObject, lang) || '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
 * @param {any} descriptionObject - –û–±—ä–µ–∫—Ç –∏–ª–∏ JSON —Å—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
 * @param {string} lang - –ö–æ–¥ —è–∑—ã–∫–∞
 * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
 */
function getDescriptionByLanguage(descriptionObject, lang) {
    return parseMultilingualField(descriptionObject, lang) || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
 * @param {any} categoryObject - –û–±—ä–µ–∫—Ç –∏–ª–∏ JSON —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {string} lang - –ö–æ–¥ —è–∑—ã–∫–∞
 * @returns {string} –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
 */
function getCategoryNameByLanguage(categoryObject, lang) {
    return parseMultilingualField(categoryObject, lang) || '–ö–∞—Ç–µ–≥–æ—Ä–∏—è';
}

// === –•–ï–õ–ü–ï–†–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° nameRu/nameEn –ü–û–õ–Ø–ú–ò (–°–¢–†–ê–ù–´, –ì–û–†–û–î–ê) ===

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å –ø–æ–ª—è–º–∏ nameRu/nameEn
 * @param {object} entity - –û–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ nameRu –∏ nameEn
 * @param {string} fieldBaseName - –ë–∞–∑–æ–≤–æ–µ –∏–º—è –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'name')
 * @param {string} lang - –ö–æ–¥ —è–∑—ã–∫–∞ ('ru' | 'en')
 * @returns {string} –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 */
function formatMultilingualField(entity, fieldBaseName = 'name', lang = 'ru') {
    if (!entity) return '';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π: name ‚Üí nameRu, nameEn
    const ruField = fieldBaseName + 'Ru';
    const enField = fieldBaseName + 'En';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    if (lang === 'en') {
        return entity[enField] || entity[ruField] || '';
    } else {
        return entity[ruField] || entity[enField] || '';
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–∫–∞—Ü–∏—é (—Å—Ç—Ä–∞–Ω–∞ ‚Ä¢ –≥–æ—Ä–æ–¥) –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
 * @param {object} country - –û–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω—ã —Å –ø–æ–ª—è–º–∏ nameRu, nameEn
 * @param {object} city - –û–±—ä–µ–∫—Ç –≥–æ—Ä–æ–¥–∞ —Å –ø–æ–ª—è–º–∏ nameRu, nameEn
 * @param {string} lang - –ö–æ–¥ —è–∑—ã–∫–∞ ('ru' | 'en')
 * @param {string} separator - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ' ‚Ä¢ ')
 * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è
 */
function formatLocation(country, city, lang = 'ru', separator = ' ‚Ä¢ ') {
    const countryName = formatMultilingualField(country, 'name', lang);
    const cityName = formatMultilingualField(city, 'name', lang);
    
    if (countryName && cityName) {
        return `${countryName}${separator}${cityName}`;
    } else if (countryName) {
        return countryName;
    } else if (cityName) {
        return cityName;
    }
    
    return '';
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏)
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ JSON {ru, en}, —Ç–∞–∫ –∏ nameRu/nameEn –ø–æ–ª—è
 * @param {any} entity - –û–±—ä–µ–∫—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º
 * @param {string} lang - –ö–æ–¥ —è–∑—ã–∫–∞
 * @returns {string} –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
 */
function getEntityName(entity, lang = 'ru') {
    if (!entity) return '';
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (typeof entity === 'string') return entity;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JSON {ru, en}
    if (entity.ru || entity.en) {
        return getLocalizedText(entity, lang);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç nameRu/nameEn
    if (entity.nameRu || entity.nameEn) {
        return formatMultilingualField(entity, 'name', lang);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ–µ –ø–æ–ª–µ name
    if (entity.name) {
        // –ï—Å–ª–∏ name - —ç—Ç–æ JSON –æ–±—ä–µ–∫—Ç
        const parsed = safeJsonParse(entity.name);
        return getLocalizedText(parsed, lang);
    }
    
    return '';
}

// === –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô –í –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –û–ë–õ–ê–°–¢–¨ ===

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.safeJsonParse = safeJsonParse;
window.getLocalizedText = getLocalizedText;
window.parseMultilingualField = parseMultilingualField;

// –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
window.updateMultilingualElement = updateMultilingualElement;
window.translateAllDynamicContent = translateAllDynamicContent;

// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.updateTourTitles = updateTourTitles;
window.updateTourDescriptions = updateTourDescriptions;
window.updateCategoryNames = updateCategoryNames;
window.updateHotelContent = updateHotelContent;
window.updateGuideContent = updateGuideContent;
window.updateLocationNames = updateLocationNames;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.createMultilingualDataAttribute = createMultilingualDataAttribute;
window.getCurrentLanguage = getCurrentLanguage;
window.switchToLanguage = switchToLanguage;

// –§—É–Ω–∫—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.getTitleByLanguage = getTitleByLanguage;
window.getDescriptionByLanguage = getDescriptionByLanguage;
window.getCategoryNameByLanguage = getCategoryNameByLanguage;

// –•–µ–ª–ø–µ—Ä—ã –¥–ª—è nameRu/nameEn –ø–æ–ª–µ–π
window.formatMultilingualField = formatMultilingualField;
window.formatLocation = formatLocation;
window.getEntityName = getEntityName;

// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —É—Ç–∏–ª–∏—Ç–∞–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.MultilingualUtils = {
  safeJsonParse,
  getLocalizedText,
  parseMultilingualField,
  updateMultilingualElement,
  translateAllDynamicContent,
  updateTourTitles,
  updateTourDescriptions,
  updateCategoryNames,
  updateHotelContent,
  updateGuideContent,
  updateLocationNames,
  createMultilingualDataAttribute,
  getCurrentLanguage,
  switchToLanguage,
  getTitleByLanguage,
  getDescriptionByLanguage,
  getCategoryNameByLanguage,
  formatMultilingualField,
  formatLocation,
  getEntityName
};

console.log('üåê –°–∏—Å—Ç–µ–º–∞ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');