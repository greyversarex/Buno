 нанял тебя для проведения полного технического аудита существующего веб-проекта "Bunyod-Tour". У тебя есть доступ ко всему коду. Мне нужен исчерпывающий, структурированный отчет о текущем состоянии проекта, его сильных и слабых сторонах, а также рекомендации по дальнейшему развитию.

**Твоя задача: Провести комплексный аудит и предоставить отчет по следующим разделам.**

---

### РАЗДЕЛ 1: АРХИТЕКТУРА ПРОЕКТА

1.  **Общая структура:** Опиши, как устроен проект. Как взаимодействуют фронтенд (`frontend/`), бэкенд (`src/`), база данных (`prisma/`) и статические ассеты (`public/`). Оцени эту структуру.
2.  **Фронтенд:**
    *   **Технологии:** Подтверди, что используется Vanilla JS (чистый JavaScript) без фреймворков.
    *   **Архитектура:** Оцени текущий подход с большими HTML-файлами (`admin-dashboard.html`, `tour-template.html` и т.д.). Каковы его плюсы и минусы в контексте этого проекта? Есть ли дублирование кода (например, шапка/подвал)?
3.  **Бэкенд:**
    *   **Технологии:** Оцени использование Node.js, Express, TypeScript.
    *   **Архитектура:** Опиши структуру папок в `src/` (controllers, models, routes и т.д.). Насколько она логична и последовательна?
4.  **База данных:**
    *   **Технологии:** Оцени использование PostgreSQL и Prisma.
    *   **Схема (`schema.prisma`):** Проанализируй схему. Насколько она хорошо спроектирована? Есть ли потенциальные проблемы (например, непоследовательное использование `Json` для многоязычных полей, как в моделях `Country`/`City`)?

---

### РАЗДЕЛ 2: АНАЛИЗ КЛЮЧЕВЫХ СИСТЕМ

Проведи аудит следующих сквозных систем:

1.  **Система Многоязычности (i18n):**
    *   **Анализ:** Опиши, как работают обе системы (статическая через `i18n.js` и динамическая через `multilingual-utils.js`). Найди и опиши их сильные и слабые стороны. Насколько хорошо они интегрированы?
    *   **Рекомендация:** Предложи свой план по улучшению этой системы.

2.  **Обработка данных в Админ-панели:**
    *   **Анализ:** Сравни, как реализованы создание и редактирование для модулей "Туры", "Отели" и "Гиды". Найди все различия, дублирование кода и архитектурные несоответствия.
    *   **Рекомендация:** Предложи единый, унифицированный стандарт для обработки форм во всей админ-панели.

3.  **Обработка изображений и файлов:**
    *   **Анализ:** Опиши, как работает загрузка файлов (Multer, ObjectUploader) и их отображение на сайте. Насколько надежна текущая система? Используется ли везде `getAbsoluteImageUrl`?
    *   **Рекомендация:** Есть ли способы улучшить эту систему?

---

### РАЗДЕЛ 3: ОЦЕНКА КАЧЕСТВА КОДА

1.  **Читаемость и Поддерживаемость:** Оцени, насколько легко читать и поддерживать код. Есть ли комментарии? Используются ли понятные имена переменных и функций?
2.  **Дублирование кода (DRY - Don't Repeat Yourself):** Найди и приведи 3-5 самых ярких примеров дублирования кода в проекте.
3.  **Безопасность:** Проведи базовый аудит безопасности. Есть ли потенциальные уязвимости (например, SQL-инъекции (хотя Prisma от них защищает), XSS-атаки, небезопасная обработка пользовательского ввода)? Как обрабатываются секретные ключи (`.env`)?

---

### РАЗДЕЛ 4: СТРАТЕГИЧЕСКИЕ РЕКОМЕНДАЦИИ

На основе всего твоего анализа, ответь на главный вопрос:

**"Если бы это был твой проект, какие 3-5 самых главных шагов ты бы предпринял в первую очередь для его улучшения, чтобы сделать его стабильным, масштабируемым и легким в поддержке в долгосрочной перспективе?"**

Представь свои рекомендации в виде пошагового плана с четким обоснованием каждого шага.

---

Мне не нужно, чтобы ты что-либо менял в коде. Мне нужен только честный, глубокий и объективный отчет. Этот документ станет основой для всей нашей дальнейшей работы.